import threading
import random
import time

class Philosopher(threading.Thread):
    running = True

    def __init__(self, xname, forkOnLeft, forkOnRight):
        threading.Thread.__init__(self)
        self.name = xname
        self.forkOnLeft = forkOnLeft
        self.forkOnRight = forkOnRight

    def start(self):
        while (self.running):
            time.sleep(random.uniform(3, 13))
            print('%s jest głodna.' % self.name)
            self.jedzenie()

    def jedzenie(self):
        fork1, fork2 = self.forkOnLeft, self.forkOnRight

        while self.running:
            fork1.acquire()
            locked = fork2.acquire()
            if locked: break
            fork1.release()
            print('%s zamienia widelce.' % self.name)
            fork1, fork2 = fork2, fork1
        else:
            return

        self.stol()
        fork2.release()
        fork1.release()

    def stol(self):
        print('%s zaczyna jeść. ' % self.name)
        time.sleep(random.uniform(1, 10))
        print('%s kończy jedzenie.' % self.name)


def DiningPhilosophers():
    forks = [threading.Lock() for n in range(5)]
    philosopherNames = ('Ania', 'Basia', 'Kasia', 'Gosia', 'Zosia')

    philosophers = [Philosopher(philosopherNames[i], forks[i % 5], forks[(i + 1) % 5]) \
                    for i in range(5)]

    random.seed(10000)
    Philosopher.running = True
    for p in philosophers: p.start()
    time.sleep(50)
    Philosopher.running = False
    print("Koniec.")


DiningPhilosophers()
